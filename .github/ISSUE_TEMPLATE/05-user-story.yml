name: "üìö User Story"
description: "Individual user story ready for development"
title: "[STORY] As a [user], I want [goal] so that [benefit]"
labels: ["story", "ready-for-development", "hive-mind"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        <!-- workflow-type: user-story -->
        # üìö User Story Template
        
        **Purpose:** Define a single piece of functionality from a user's perspective that can be completed in one sprint.
        
        **For junior developers:** User stories are the building blocks of features. They should be small enough to complete in a few days but valuable enough that users would notice them.
        
        ---
  
  - type: input
    id: feature-reference
    attributes:
      label: "üîó Parent Feature"
      description: "Link to the feature this story belongs to (e.g., #123)"
      placeholder: "#123"
    validations:
      required: true

  - type: textarea
    id: user-story
    attributes:
      label: "üìù User Story"
      description: "As a [user type], I want [functionality] so that [benefit/value]"
      placeholder: "As a new user, I want to enter my email and password on a registration form so that I can create an account quickly and securely."
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: "‚úÖ Acceptance Criteria"
      description: "Specific, testable requirements (Given/When/Then format works well)"
      placeholder: |
        **Scenario 1: Successful registration**
        ‚Ä¢ Given I am on the registration page
        ‚Ä¢ When I enter a valid email and strong password
        ‚Ä¢ And I click the "Sign Up" button
        ‚Ä¢ Then I should see a success message
        ‚Ä¢ And I should receive a verification email
        ‚Ä¢ And I should be redirected to the email verification page
        
        **Scenario 2: Invalid email format**
        ‚Ä¢ Given I am on the registration page
        ‚Ä¢ When I enter an invalid email format (e.g., "notanemail")
        ‚Ä¢ And I try to submit the form
        ‚Ä¢ Then I should see an error message "Please enter a valid email address"
        ‚Ä¢ And the form should not submit
        
        **Scenario 3: Weak password**
        ‚Ä¢ Given I am on the registration page
        ‚Ä¢ When I enter a password that doesn't meet requirements
        ‚Ä¢ Then I should see password requirements and current status
        ‚Ä¢ And the submit button should be disabled until requirements are met
      value: |
        **Scenario 1: [Happy path]**
        ‚Ä¢ Given 
        ‚Ä¢ When 
        ‚Ä¢ Then 
        
        **Scenario 2: [Error case]**
        ‚Ä¢ Given 
        ‚Ä¢ When 
        ‚Ä¢ Then 
    validations:
      required: true

  - type: textarea
    id: definition-of-done
    attributes:
      label: "üèÅ Definition of Done"
      description: "What must be completed for this story to be considered 'done'?"
      placeholder: |
        **Development:**
        ‚Ä¢ [ ] Code written and reviewed
        ‚Ä¢ [ ] Unit tests written and passing
        ‚Ä¢ [ ] Integration tests passing
        ‚Ä¢ [ ] Code meets style guidelines
        ‚Ä¢ [ ] No critical security vulnerabilities
        
        **Testing:**
        ‚Ä¢ [ ] Manual testing completed
        ‚Ä¢ [ ] Cross-browser testing (Chrome, Firefox, Safari)
        ‚Ä¢ [ ] Mobile testing (iOS, Android)
        ‚Ä¢ [ ] Accessibility testing
        
        **Documentation:**
        ‚Ä¢ [ ] API documentation updated (if applicable)
        ‚Ä¢ [ ] User-facing documentation updated
        ‚Ä¢ [ ] Technical documentation for team
        
        **Deployment:**
        ‚Ä¢ [ ] Feature deployed to staging
        ‚Ä¢ [ ] QA approval received
        ‚Ä¢ [ ] Ready for production deployment

  - type: dropdown
    id: story-points
    attributes:
      label: "üìä Story Points"
      description: "Relative estimation of effort (use Fibonacci sequence)"
      options:
        - "1 - Trivial (few hours)"
        - "2 - Small (half day)"
        - "3 - Medium (1 day)"
        - "5 - Large (2-3 days)"
        - "8 - Very Large (1 week)"
        - "13 - Too Big (needs splitting)"
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: "üö® Priority"
      description: "How important is this story within the feature?"
      options:
        - "üî• Critical - Must have"
        - "üöÄ High - Should have"
        - "üìà Medium - Could have"
        - "üîÆ Low - Won't have (this sprint)"
    validations:
      required: true

  - type: checkboxes
    id: tasks
    attributes:
      label: "üìã Development Tasks"
      description: "Break down the work into specific tasks"
      options:
        - label: "Create registration form component"
        - label: "Add form validation logic"
        - label: "Style form with design system"
        - label: "Create API endpoint for registration"
        - label: "Add database migration for users table"
        - label: "Implement email validation"
        - label: "Add password strength checking"
        - label: "Create error handling and display"
        - label: "Add loading states and feedback"
        - label: "Write unit tests for form logic"
        - label: "Write API tests for registration"
        - label: "Add integration tests for full flow"
        - label: "Test cross-browser compatibility"
        - label: "Test mobile responsiveness"
        - label: "Update API documentation"

  - type: textarea
    id: technical-notes
    attributes:
      label: "üîß Technical Implementation Notes"
      description: "Specific technical guidance for developers"
      placeholder: |
        **Frontend (React):**
        ‚Ä¢ Use React Hook Form for form management
        ‚Ä¢ Implement real-time validation with yup schema
        ‚Ä¢ Add loading spinner during submission
        ‚Ä¢ Use design system components (Button, Input, Alert)
        
        **Backend (Node.js/Express):**
        ‚Ä¢ POST /api/users/register endpoint
        ‚Ä¢ Validate email format and uniqueness
        ‚Ä¢ Hash password with bcrypt (salt rounds: 12)
        ‚Ä¢ Return JWT token for immediate authentication
        
        **Database:**
        ‚Ä¢ Add unique constraint on email field
        ‚Ä¢ Store password_hash, not plain password
        ‚Ä¢ Add created_at and updated_at timestamps
        
        **Testing:**
        ‚Ä¢ Mock email service in tests
        ‚Ä¢ Test password hashing/verification
        ‚Ä¢ Verify unique email constraint handling

  - type: textarea
    id: design-notes
    attributes:
      label: "üé® Design & UX Notes"
      description: "Specific design requirements and considerations"
      placeholder: |
        **Visual Design:**
        ‚Ä¢ Follow design system for form styling
        ‚Ä¢ Use primary button for submit action
        ‚Ä¢ Display errors in red with icon
        ‚Ä¢ Show password requirements dynamically
        
        **User Experience:**
        ‚Ä¢ Validate email format on blur
        ‚Ä¢ Show password strength meter
        ‚Ä¢ Disable submit until form is valid
        ‚Ä¢ Provide clear feedback for all states
        
        **Accessibility:**
        ‚Ä¢ Proper form labels and ARIA attributes
        ‚Ä¢ Keyboard navigation support
        ‚Ä¢ Screen reader announcements for errors
        ‚Ä¢ Color is not the only indicator of state
        
        **Mobile Considerations:**
        ‚Ä¢ Use appropriate input types (email, password)
        ‚Ä¢ Ensure touch targets are 44px minimum
        ‚Ä¢ Consider mobile keyboard impact on layout

  - type: textarea
    id: test-scenarios
    attributes:
      label: "üß™ Test Scenarios"
      description: "Specific scenarios to test (for QA and manual testing)"
      placeholder: |
        **Happy Path:**
        1. User enters valid email and password ‚Üí Registration succeeds
        2. User receives verification email within 30 seconds
        3. Form is responsive on mobile devices
        
        **Error Handling:**
        1. Invalid email format ‚Üí Clear error message shown
        2. Password too weak ‚Üí Requirements shown, submit disabled
        3. Email already exists ‚Üí Helpful error message
        4. Network error ‚Üí User can retry action
        
        **Edge Cases:**
        1. Very long email address (100+ chars)
        2. Special characters in password
        3. Rapid form submission (double-click)
        4. Form behavior when offline
        
        **Accessibility:**
        1. Tab navigation through form fields
        2. Screen reader announcements
        3. High contrast mode compatibility

  - type: textarea
    id: dependencies
    attributes:
      label: "üîó Dependencies"
      description: "What must be completed before this story can start?"
      placeholder: |
        **Blocking Dependencies:**
        ‚Ä¢ User database table created
        ‚Ä¢ Email service configured
        ‚Ä¢ Authentication middleware ready
        
        **Helpful Dependencies:**
        ‚Ä¢ Design system components available
        ‚Ä¢ Form validation patterns established
        ‚Ä¢ Testing framework configured

  - type: textarea
    id: risks
    attributes:
      label: "‚ö†Ô∏è Risks & Concerns"
      description: "What could go wrong? How can we mitigate risks?"
      placeholder: |
        **Technical Risks:**
        ‚Ä¢ Email service integration might be complex
        ‚Ä¢ Form validation logic could become complicated
        ‚Ä¢ Password hashing performance impact
        
        **UX Risks:**
        ‚Ä¢ Form might be too long on mobile
        ‚Ä¢ Error messages might be confusing
        ‚Ä¢ Password requirements might be too strict
        
        **Mitigation:**
        ‚Ä¢ Start with email service integration early
        ‚Ä¢ User test form on mobile devices
        ‚Ä¢ A/B test password requirements

  - type: markdown
    attributes:
      value: |
        ---
        
        ## ü§ñ What happens next?
        
        1. **üìÖ Sprint Planning**: Story is estimated and added to upcoming sprint
        2. **üë§ Assignment**: Developer is assigned to implement the story
        3. **üöÄ Development**: Implementation begins with swarm coordination
        4. **üß™ Testing**: QA team tests against acceptance criteria
        5. **‚úÖ Review**: Story is reviewed and marked complete
        
        **For developers:** Use the swarm coordination tools to:
        - Load context with `npx claude-flow@alpha hooks pre-task`
        - Save progress with `npx claude-flow@alpha hooks post-edit`
        - Coordinate with other agents throughout development
        
        **Auto-labels:** `story`, `ready-for-development`, `hive-mind`